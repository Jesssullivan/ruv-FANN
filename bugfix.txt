Summary
Several issues were found during testing of the ruv-swarm npm package that need to be addressed.

Issues Found
1. MCP server startup - Needs to specify --bin flag when running cargo command
Problem: When running npm run mcp:server, the command fails with:

error: `cargo run` could not determine which binary to run. Use the `--bin` option to specify a binary, or the `default-run` manifest key.
available binaries: ruv-swarm-mcp, ruv-swarm-mcp-stdio
Solution: Update the npm script to specify the binary:

"mcp:server": "cd ../crates/ruv-swarm-mcp && cargo run --bin ruv-swarm-mcp-stdio"
2. ES module issues - Some tests use CommonJS require() in ES module context
Problem: Several test files use require() syntax but the package.json specifies "type": "module", causing errors like:

ReferenceError: require is not defined in ES module scope, you can use import instead
Affected files:

test/persistence.test.js
Other test files using CommonJS syntax
Solution: Either:

Convert test files to use ES module imports
Rename test files to .cjs extension
Remove "type": "module" from package.json
3. CLI initialization delay - Takes longer than expected to start up
Problem: The CLI command ruv-swarm --version takes over 2 minutes to complete, with messages like:

[INFO] Pooled persistence layer initialized successfully
Solution: Investigate and optimize initialization process, possibly:

Lazy load persistence layer
Add flag to skip persistence initialization for simple commands
Optimize pooled connection startup
4. Minor WASM function issue - spawnAgent function not found
Problem: WASM validation test fails with:

‚ùå WASM functionality test failed: TypeError: swarm.spawnAgent is not a function
Test results: 71.43% pass rate (5/7 tests passed)

Solution:

Check if function was renamed in WASM module
Update test to use correct function name
Ensure WASM module exports match expected API
Test Results
Basic tests: 8/8 passed ‚úÖ
WASM tests: 5/7 passed (71.43%)
CLI: Functional but slow
MCP server: Builds but npm script needs fix
Priority
High: MCP server startup fix (blocks other tests)
High: ES module issues (blocks test suite)
Medium: CLI initialization delay (affects user experience)
Low: WASM function issue (minor API mismatch)
Activity

ruvnet
added
bug
Something isn't working

npm
 20 hours ago
ruvnet
ruvnet commented 19 hours ago
ruvnet
19 hours ago
Owner
Author
Update: Docker Testing Completed
I've created a comprehensive Docker testing infrastructure and run tests. Here's the update on the issues:

üê≥ Docker Test Results
Successfully created Docker testing infrastructure in ruv-swarm/npm/docker/test/:

Multiple Dockerfiles for different testing scenarios
docker-compose configurations for orchestration
Test runner scripts with comprehensive coverage
Full documentation
‚úÖ Test Results Summary
================================================
ruv-swarm Simple Docker Tests
================================================
Node: v22.17.0
================================================

‚úÖ Node.js environment working
‚úÖ Package structure valid
‚úÖ Dependencies installed (40 packages)
‚úÖ WASM files found (4 files)
‚úÖ Module loading successful
‚úÖ Basic tests: 8/8 passed
üìä Issue Status Update
MCP server startup ‚ö†Ô∏è Still needs fix

Confirmed: npm script needs --bin flag
Workaround documented in Docker setup
ES module issues ‚ö†Ô∏è Confirmed in Docker

Some tests still use CommonJS require()
Docker tests work by using basic test suite
CLI initialization delay ‚úÖ Less severe in Docker

Still present but more manageable in containerized environment
Timeout handling added to test scripts
WASM function issue ‚úÖ Not blocking

WASM files load correctly
Basic functionality works
May just be API change
üîß Immediate Actions Needed
Update package.json with correct MCP server command:

"mcp:server": "cd ../crates/ruv-swarm-mcp && cargo run --bin ruv-swarm-mcp-stdio"
Convert test files to ES modules or rename to .cjs

Optimize CLI startup for better performance

üìÅ New Docker Test Infrastructure
Created in ruv-swarm/npm/docker/test/:

Dockerfile.simple - Lightweight test container
docker-compose.yml - Full test orchestration
run-tests-simple.sh - Test runner script
Makefile - Convenient commands
README.md - Complete documentation
To run Docker tests:

cd ruv-swarm/npm
docker build -f docker/test/Dockerfile.simple -t ruv-swarm-test:simple .
docker run --rm ruv-swarm-test:simple
The core functionality is working well, but the identified issues should be addressed for a smoother developer experience.



Do not create new files unless absolutely needed, modify existing code by default.  Use the provided docker tests described in the bug report.


This is effecting downstream use in claude-flow alpha 2.0.0;

‚úÖ DAA Service initialized in 0.32ms
{"jsonrpc":"2.0","method":"server.initialized","params":{"serverInfo":{"name":"ruv-swarm","version":"1.0.8","capabilities":{"tools":true,"prompts":false,"resources":true}}}}
‚ùå Uncaught Exception: logger.logMemoryUsage is not a function
This prevents ruv-swarm from integrating with Claude Code's MCP protocol.
